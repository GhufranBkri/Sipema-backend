// schema.prisma
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // Used for migrations
}

enum Roles {
  USER
  ADMIN
  PETUGAS_SUPER
  PETUGAS
}

enum Status {
  PENDING
  PROCESS
  REJECTED
  COMPLETED
}

model User {
  id            String      @id @default(cuid())
  email         String
  no_identitas  String      @unique
  name          String
  password      String
  program_studi String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  role          Roles
  // Relasi untuk pelapor
  pengaduan     Pengaduan[] @relation("pelapor")
  // Relasi untuk petugas unit
  unit_petugas  Unit?       @relation("petugas")
}

model Unit {
  id        String      @id @default(cuid())
  nama_unit String      @unique
  pengaduan Pengaduan[]
  petugas   User?       @relation("petugas", fields: [petugasId], references: [no_identitas])
  petugasId String?     @unique
}

model Kategori {
  id          String      @id @default(cuid())
  nama        String
  pengaduanId String?
  pengaduan   Pengaduan[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Pengaduan {
  id         String   @id @default(cuid())
  judul      String
  deskripsi  String
  status     Status   @default(PENDING)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  response   String?
  kategoriId String
  kategori   Kategori @relation(fields: [kategoriId], references: [id])
  pelapor    User     @relation("pelapor", fields: [pelaporId], references: [no_identitas])
  pelaporId  String
  unit     Unit   @relation(fields: [nameUnit], references: [nama_unit])
  nameUnit String
}
