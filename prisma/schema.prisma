// schema.prisma
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // Used for migrations
}

enum Roles {
  TENAGA_KEPENDIDIKAN
  MAHASISWA
  DOSEN
  ADMIN
  PETUGAS_SUPER
  PETUGAS_WBS
  KEPALA_WBS
  PETUGAS
  KEPALA_PETUGAS_UNIT
}

enum Status {
  PENDING
  PROCESS
  REJECTED
  COMPLETED
}

enum NotificationType {
  NEW_REPORT
  REPORT_UPDATED
  REPORT_IN_PROCESS
}

model Notification {
  id                   String           @id @default(cuid())
  userId               String
  title                String
  message              String
  isRead               Boolean          @default(false)
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  type                 NotificationType
  user                 User             @relation(fields: [userId], references: [no_identitas])
  
  pengaduanId          String?
  pengaduan            Pengaduan?       @relation(fields: [pengaduanId], references: [id])
  
  pengaduanMasyarakatId String?
  pengaduanMasyarakat  PengaduanMasyarakat? @relation(fields: [pengaduanMasyarakatId], references: [id])
  
  pelaporanWBSId       String?
  pelaporanWBS         PelaporanWBS?    @relation(fields: [pelaporanWBSId], references: [id])
}

model User {
  id            String      @id @default(cuid())
  email         String
  no_identitas  String      @unique
  name          String
  password      String
  program_studi String?
  no_telphone   String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  role          Roles
  pengaduan     Pengaduan[] @relation("pelapor")
  pengaduanWBS  PelaporanWBS[] @relation("pelapor")
  notifications Notification[] 
  unit_petugas  Unit?     @relation("petugas", fields: [unitId], references: [id])
  unitId        String?
  unit_kepala   Unit?     @relation("kepalaUnit")
  petugas_wbs   PetugasWBS[]  @relation("petugasWBS")    
  kepala_wbs    PetugasWBS? @relation("kepalaWBS")    
}
model Unit {
  id                  String                @id @default(cuid())
  nama_unit           String                @unique
  pengaduan           Pengaduan[]
  petugas             User[]                @relation("petugas")
  kepalaUnit          User                  @relation("kepalaUnit", fields: [kepalaUnitId], references: [no_identitas])
  kepalaUnitId        String                @unique
  PengaduanMasyarakat PengaduanMasyarakat[]
}

model Kategori {
  id                  String                @id @default(cuid())
  nama                String
  pengaduan           Pengaduan[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  PengaduanMasyarakat PengaduanMasyarakat[]
}

model PetugasWBS {
  id            String    @id @default(cuid())
  kepalaWnBS     User      @relation("kepalaWBS", fields: [kepalaWBSId], references: [no_identitas])
  kepalaWBSId   String    @unique  // Tetap unique karena hanya ada 1 kepala
  petugas       User      @relation("petugasWBS", fields: [petugasId], references: [no_identitas])
  petugasId     String    // Tidak unique agar bisa ada beberapa petugas
  isActive      Boolean   @default(true)  // Tambahan untuk status aktif petugas
  pelaporanWBS  PelaporanWBS[]
}

// test
model PelaporanWBS {
  id             String       @id  @default(cuid())
  judul          String
  deskripsi      String
  pihakTerlibat  String
  tanggalKejadian DateTime
  lokasi         String
  kategoriId     String 
  unit           String
  kategori       KategoriWBS  @relation(fields: [kategoriId], references: [id])
  pelaporId      String?
  petugasWBS     PetugasWBS? @relation(fields: [petugasWBSId], references: [id])
  petugasWBSId   String?
  pelapor        User?      @relation("pelapor", fields: [pelaporId], references: [no_identitas])
  status         Status     @default(PENDING)
  notfications   Notification[]
  approvedBy     String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  response       String?
}

model KategoriWBS {
  id          String         @id @default(cuid())
  nama        String         @unique
  deskripsi   String?
  pelaporan   PelaporanWBS[]
}

model PengaduanMasyarakat {
  id            String   @id @default(cuid())
  judul         String
  deskripsi     String
  status        Status   @default(PENDING)
  unit          Unit     @relation(fields: [nameUnit], references: [nama_unit])
  nameUnit      String
  response      String?
  kategori      Kategori @relation(fields: [kategoriId], references: [id])
  kategoriId    String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  nama          String
  filePendukung String?
  notfications  Notification[]
  approvedBy    String?
  no_telphone   String
  filePetugas   String?
  harapan_pelapor String?
}

model Pengaduan {
  id            String   @id @default(cuid())
  judul         String
  deskripsi     String
  kategoriId    String
  nameUnit      String
  pelaporId     String
  status        Status   @default(PENDING)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  kategori      Kategori @relation(fields: [kategoriId], references: [id])
  pelapor       User     @relation("pelapor", fields: [pelaporId], references: [no_identitas])
  unit          Unit     @relation(fields: [nameUnit], references: [nama_unit])
  notfications  Notification[]
  approvedBy    String?
  harapan_pelapor String? 
  filePendukung String?
  response      String?
  filePetugas   String?
}
